# =========================================================
# üåê WINDOW SHOPPING ‚Äî Flask App Final (v3.3, Octubre 2025)
# Autor: Christopher Ponce & GPT-5
# =========================================================

import os
import sqlite3
from datetime import timedelta, datetime
from typing import List, Dict, Any
from flask import (
    Flask, render_template, request, redirect, url_for,
    session, flash, abort
)
from werkzeug.utils import secure_filename

# =========================================================
# üîß CONFIGURACI√ìN B√ÅSICA
# =========================================================
app = Flask(__name__)
app.secret_key = os.environ.get("SECRET_KEY", "dev-secret-key")
app.permanent_session_lifetime = timedelta(days=14)

# Directorios
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_DIR = os.path.join(BASE_DIR, "static")
TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")
UPLOAD_FOLDER = os.path.join(STATIC_DIR, "uploads")
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# üîπ Subida de archivos
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER
ALLOWED_EXT = {"pdf", "png", "jpg", "jpeg"}

def allowed_file(filename: str) -> bool:
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXT

# =========================================================
# üåé SISTEMA MULTI-IDIOMA
# =========================================================
def t(es, en="", zh=""):
    lang = session.get("lang", "es")
    if lang == "en" and en:
        return en
    elif lang == "zh" and zh:
        return zh
    return es

app.jinja_env.globals.update(t=t)

from flask import session as _s, redirect as _r, request as _rq

@app.route("/lang/<code>")
def cambiar_idioma(code):
    _s["lang"] = code
    return _r(_rq.referrer or url_for("home"))

# =========================================================
# üß© TIPOS Y ROLES
# =========================================================
TIPOS_VALIDOS = {"compras", "servicios", "mixto", "compraventa"}

ROLES_POR_TIPO: Dict[str, List[str]] = {
    "compras": ["Cliente extranjero"],
    "servicios": ["Agencia de aduana", "Transporte", "Extraportuario", "Packing", "Frigor√≠fico"],
    "compraventa": ["Productor(planta)", "Packing", "Frigor√≠fico", "Exportador"],
    "mixto": ["Packing", "Frigor√≠fico"],
}

# =========================================================
# üóÑÔ∏è BASE DE DATOS (SQLite) ‚Äî Usuarios y autenticaci√≥n
# =========================================================
DB_PATH = os.path.join(BASE_DIR, "users.db")

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            empresa TEXT,
            rol TEXT,
            tipo TEXT,
            pais TEXT,
            rut_doc TEXT,
            direccion TEXT,
            telefono TEXT
        )
    """)
    conn.commit()
    conn.close()

def migrate_add_column(colname: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute(f"ALTER TABLE users ADD COLUMN {colname} TEXT")
        conn.commit()
        print(f"üõ†Ô∏è Migraci√≥n: columna '{colname}' agregada a users.")
    except sqlite3.OperationalError:
        pass
    finally:
        conn.close()

def migrate_add_rut_doc():
    migrate_add_column("rut_doc")

def migrate_add_contact_fields():
    migrate_add_column("direccion")
    migrate_add_column("telefono")

def get_user(email: str):
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE email = ?", (email,))
    user = c.fetchone()
    conn.close()
    return user

def add_user(email, password, empresa, rol, tipo, pais, rut_doc=None, direccion=None, telefono=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("""
            INSERT INTO users (email, password, empresa, rol, tipo, pais, rut_doc, direccion, telefono)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (email, password, empresa, rol, tipo, pais, rut_doc, direccion, telefono))
        conn.commit()
        print(f"üÜï Usuario creado: {email}")
    except sqlite3.IntegrityError:
        print(f"‚ö†Ô∏è El usuario {email} ya existe.")
    finally:
        conn.close()

# =========================================================
# üìÅ SUBIDA DE ARCHIVOS
# =========================================================
def save_uploaded_file(file_storage) -> str | None:
    if not file_storage or file_storage.filename == "":
        return None
    if allowed_file(file_storage.filename):
        filename = secure_filename(file_storage.filename)
        save_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        file_storage.save(save_path)
        print(f"üìÇ Archivo guardado: {save_path}")
        return f"uploads/{filename}"
    print("‚ö†Ô∏è Formato de archivo no permitido.")
    return None

# =========================================================
# üë§ SEMILLA ‚Äî Admin + 2 usuarios por rol
# =========================================================
def create_admin_if_missing():
    if not get_user("admin@ws.com"):
        add_user(
            email="admin@ws.com",
            password="1234",
            empresa="Window Shopping Admin",
            rol="Exportador",
            tipo="compraventa",
            pais="CL",
            rut_doc=None,
            direccion="Santiago, CL",
            telefono="+56 2 2222 2222",
        )
        print("‚úÖ Usuario admin creado: admin@ws.com / 1234")

def seed_demo_users():
    seeds = [
        # compraventa
        ("prod1@demo.cl","1234","Productora Valle SpA","Productor(planta)","compraventa","CL","", "Curic√≥, CL","+56 9 1111 1111"),
        ("prod2@demo.cl","1234","Agro Cordillera Ltda.","Productor(planta)","compraventa","CL","", "Rancagua, CL","+56 9 2222 2222"),
        ("pack1@demo.cl","1234","Packing Maule SpA","Packing","compraventa","CL","", "Talca, CL","+56 9 3333 3333"),
        ("pack2@demo.cl","1234","Packing Sur SpA","Packing","compraventa","CL","", "Osorno, CL","+56 9 4444 4444"),
        ("frio1@demo.cl","1234","Fr√≠o Centro SpA","Frigor√≠fico","compraventa","CL","", "San Fernando, CL","+56 9 5555 5555"),
        ("frio2@demo.cl","1234","Patagonia Cold SA","Frigor√≠fico","compraventa","CL","", "Punta Arenas, CL","+56 9 6666 6666"),
        ("exp1@demo.cl","1234","Exportadora Andes","Exportador","compraventa","CL","", "Providencia, CL","+56 2 2345 6789"),
        ("exp2@demo.cl","1234","Exportadora Pac√≠fico","Exportador","compraventa","CL","", "Vitacura, CL","+56 2 2567 8901"),
        # servicios
        ("aduana1@demo.cl","1234","Agencia Andes","Agencia de aduana","servicios","CL","", "Valpara√≠so, CL","+56 32 222 2222"),
        ("aduana2@demo.cl","1234","Agencia Sur","Agencia de aduana","servicios","CL","", "San Antonio, CL","+56 35 233 3333"),
        ("trans1@demo.cl","1234","Transporte R√°pido","Transporte","servicios","CL","", "Santiago, CL","+56 2 2777 7777"),
        ("trans2@demo.cl","1234","Log√≠stica Express","Transporte","servicios","CL","", "Concepci√≥n, CL","+56 41 2888 8888"),
        ("extra1@demo.cl","1234","Extraportuario Norte","Extraportuario","servicios","CL","", "Antofagasta, CL","+56 55 2999 9999"),
        ("extra2@demo.cl","1234","Extraportuario Sur","Extraportuario","servicios","CL","", "Puerto Montt, CL","+56 65 211 1111"),
        # mixto
        ("mixpack1@demo.cl","1234","Mixto Packing Uno","Packing","mixto","CL","", "Talagante, CL","+56 2 2123 4567"),
        ("mixfrio1@demo.cl","1234","Mixto Frio Uno","Frigor√≠fico","mixto","CL","", "Chill√°n, CL","+56 42 2987 6543"),
        # compras (cliente extranjero)
        ("cliente1@ext.com","1234","Importadora Asia Ltd.","Cliente extranjero","compras","US","", "Miami, US","+1 305 555 0101"),
        ("cliente2@ext.com","1234","Global Retail HK","Cliente extranjero","compras","HK","", "Kowloon, HK","+852 5555 0101"),
        # servicio-only extra
        ("packserv1@demo.cl","1234","Packing Servicios SPA","Packing","servicios","CL","", "Quillota, CL","+56 33 244 4444"),
        ("frioserv1@demo.cl","1234","Fr√≠o Servicios SPA","Frigor√≠fico","servicios","CL","", "La Calera, CL","+56 33 255 5555"),
    ]
    for email, pwd, empresa, rol, tipo, pais, rut_doc, direccion, telefono in seeds:
        if not get_user(email):
            add_user(email, pwd, empresa, rol, tipo, pais, rut_doc=rut_doc, direccion=direccion, telefono=telefono)
            print(f"üßë‚Äçüíº Usuario ficticio agregado: {email}")

# Inicializaci√≥n
init_db()
migrate_add_rut_doc()
migrate_add_contact_fields()
create_admin_if_missing()
seed_demo_users()

# =========================================================
# üì¶ PUBLICACIONES DEMO + Carrito + Ocultos (helpers)
# =========================================================
PUBLICACIONES: List[Dict[str, Any]] = [
    # Ofertas fruta
    {"id": "pub1", "usuario": "exp1@demo.cl", "tipo": "oferta", "rol": "Exportador",
     "empresa": "Exportadora Andes", "producto": "Cerezas Premium", "precio": "USD 7/kg",
     "descripcion": "Lapins 28+, condici√≥n exportaci√≥n."},
    # Servicios
    {"id": "pub2", "usuario": "pack1@demo.cl", "tipo": "servicio", "rol": "Packing",
     "empresa": "Packing Maule SpA", "producto": "Servicio de Embalaje", "precio": "USD 0.50/kg",
     "descripcion": "Clamshell y flowpack. BRC/IFS."},
    {"id": "pub3", "usuario": "frio1@demo.cl", "tipo": "servicio", "rol": "Frigor√≠fico",
     "empresa": "Fr√≠o Centro SpA", "producto": "Almacenamiento Refrigerado", "precio": "USD 0.20/kg",
     "descripcion": "C√°maras -1 a 10¬∞C, AC, monitoreo 24/7."},
    {"id": "pub4", "usuario": "aduana1@demo.cl", "tipo": "servicio", "rol": "Agencia de aduana",
     "empresa": "Agencia Andes", "producto": "Tramitaci√≥n Exportaci√≥n", "precio": "USD 200/tr√°mite",
     "descripcion": "DUS, MIC/DTA, doc y aforo."},
    # Demandas
    {"id": "pub5", "usuario": "cliente1@ext.com", "tipo": "demanda", "rol": "Cliente extranjero",
     "empresa": "Importadora Asia Ltd.", "producto": "Demanda Fruta Chilena", "precio": "Consultar",
     "descripcion": "Cereza, ar√°ndano y uva, semanas 46-3."},
]

def get_cart() -> List[Dict[str, Any]]:
    return session.setdefault("cart", [])

def save_cart(cart: List[Dict[str, Any]]) -> None:
    session["cart"] = cart

def add_to_cart(item: Dict[str, Any]) -> None:
    cart = get_cart()
    if not any(i.get("id") == item.get("id") for i in cart):
        cart.append(item)
        save_cart(cart)

def remove_from_cart(index: int) -> bool:
    cart = get_cart()
    if 0 <= index < len(cart):
        cart.pop(index); save_cart(cart); return True
    return False

def clear_cart() -> None:
    save_cart([])

def get_hidden_items() -> List[str]:
    return session.setdefault("hidden_items", [])

def hide_item(item_id: str) -> None:
    hidden = get_hidden_items()
    if item_id not in hidden:
        hidden.append(item_id)
        session["hidden_items"] = hidden

def unhide_all() -> None:
    session["hidden_items"] = []

# =========================================================
# üîê PERMISOS DE VISIBILIDAD
# =========================================================
PERMISOS: Dict[str, Dict[str, List[str]]] = {
    "fruta_oferta_visible_por_rol": {
        "Packing": ["Productor(planta)"],
        "Frigor√≠fico": ["Productor(planta)", "Packing"],
        "Exportador": ["Productor(planta)", "Packing", "Frigor√≠fico", "Exportador"],
        "Cliente extranjero": ["Exportador"],
        "Productor(planta)": ["Packing", "Frigor√≠fico", "Exportador"],  # puede vender a estos
        "Agencia de aduana": [], "Transporte": [], "Extraportuario": [],
    },
    "fruta_demanda_visible_por_rol": {
        "Productor(planta)": ["Exportador", "Packing", "Frigor√≠fico", "Productor(planta)"],
        "Packing": ["Exportador", "Frigor√≠fico", "Packing"],
        "Frigor√≠fico": ["Exportador", "Packing", "Frigor√≠fico"],
        "Exportador": ["Exportador"],
        "Cliente extranjero": ["Exportador"],
        "Agencia de aduana": [], "Transporte": [], "Extraportuario": [],
    },
    "servicios_compra_de": {
        "Productor(planta)": ["Transporte", "Packing", "Frigor√≠fico"],
        "Packing": ["Transporte", "Frigor√≠fico"],
        "Frigor√≠fico": ["Transporte", "Packing"],
        "Exportador": ["Agencia de aduana", "Transporte", "Extraportuario", "Packing", "Frigor√≠fico"],
        "Cliente extranjero": [],
        "Agencia de aduana": [], "Transporte": [], "Extraportuario": [],
    },
}

def publica_es_visible_para_rol(pub: Dict[str, Any], rol_usuario: str) -> bool:
    if not pub or not rol_usuario:
        return False
    tipo_pub = pub.get("tipo"); rol_pub = pub.get("rol")
    if tipo_pub == "oferta":
        return rol_pub in PERMISOS["fruta_oferta_visible_por_rol"].get(rol_usuario, [])
    if tipo_pub == "demanda":
        return rol_pub in PERMISOS["fruta_demanda_visible_por_rol"].get(rol_usuario, [])
    if tipo_pub == "servicio":
        return rol_pub in PERMISOS["servicios_compra_de"].get(rol_usuario, [])
    return False

def publicaciones_visibles(usuario: Dict[str, Any]) -> List[Dict[str, Any]]:
    hidden = set(session.get("hidden_items", []))
    rol = (usuario or {}).get("rol", "")
    out: List[Dict[str, Any]] = []
    for p in PUBLICACIONES:
        if p.get("id") in hidden:
            continue
        if publica_es_visible_para_rol(p, rol):
            out.append(p)
    return out

# =========================================================
# üë• USERS DEMO para vistas /clientes y detalles
# =========================================================
def _normaliza_items(items: List[Dict[str, Any]] | None) -> List[Dict[str, Any]]:
    out: List[Dict[str, Any]] = []
    for it in items or []:
        nombre = it.get("producto") or it.get("servicio") or it.get("variedad") or "Item"
        tipo = it.get("tipo") or "item"
        detalle = it.get("detalle") or it.get("descripcion") or ""
        out.append({"nombre": nombre, "tipo": tipo, "detalle": detalle})
    return out

def _armar_cliente_desde_users(username: str, data: Dict[str, Any]) -> Dict[str, Any]:
    return {
        "username": username,
        "empresa": data.get("empresa", username),
        "rol": data.get("rol", ""),
        "tipo": data.get("tipo", ""),
        "descripcion": data.get("descripcion", ""),
        "items": _normaliza_items(data.get("items")),
        "email": data.get("email", username),
        "perfil_tipo": data.get("tipo", ""),
    }

USERS: Dict[str, Dict[str, Any]] = {
    "exp1@demo.cl": {"empresa": "Exportadora Andes", "rol": "Exportador", "tipo": "compraventa",
        "descripcion": "Exportaci√≥n fruta fresca.", "items": [
            {"tipo": "oferta", "producto": "Cereza Lapins", "detalle": "28+, USD 7/kg"},
        ], "email": "exp1@demo.cl"},
    "pack1@demo.cl": {"empresa": "Packing Maule SpA", "rol": "Packing", "tipo": "compraventa",
        "descripcion": "Embalaje BRC/IFS.", "items": [
            {"tipo": "servicio", "servicio": "Embalaje clamshell", "detalle": "0.50/kg"},
        ], "email": "pack1@demo.cl"},
    "frio1@demo.cl": {"empresa": "Fr√≠o Centro SpA", "rol": "Frigor√≠fico", "tipo": "compraventa",
        "descripcion": "C√°maras -1 a 10¬∞C.", "items": [
            {"tipo": "servicio", "servicio": "Fr√≠o y AC", "detalle": "0.20/kg"},
        ], "email": "frio1@demo.cl"},
    "cliente1@ext.com": {"empresa": "Importadora Asia Ltd.", "rol": "Cliente extranjero", "tipo": "compras",
        "descripcion": "Demanda frutas.", "items": [
            {"tipo": "demanda", "producto": "Cereza", "detalle": "semana 48-3"},
        ], "email": "cliente1@ext.com"},
}

# =========================================================
# üåç MULTILENGUAJE (inyector + set_lang)
# =========================================================
TRANSLATIONS = {
    "Inicio": {"en": "Home", "zh": "‰∏ªÈ†Å"},
    "Empresas": {"en": "Companies", "zh": "ÂÖ¨Âè∏"},
    "Servicios": {"en": "Services", "zh": "ÊúçÂãô"},
    "Carrito": {"en": "Cart", "zh": "Ë≥ºÁâ©Ëªä"},
    "Perfil": {"en": "Profile", "zh": "ÂÄã‰∫∫Ë≥áÊñô"},
    "Ayuda": {"en": "Help", "zh": "Âπ´Âä©"},
    "Iniciar sesi√≥n": {"en": "Login", "zh": "ÁôªÂÖ•"},
    "Registrarse": {"en": "Register", "zh": "Ë®ªÂÜä"},
    "Salir": {"en": "Logout", "zh": "ÁôªÂá∫"},
    "Comercio Internacional": {"en": "International Trade", "zh": "ÂúãÈöõË≤øÊòì"},
    "Bienvenido a Window Shopping": {"en": "Welcome to Window Shopping","zh": "Ê≠°Ëøé‰æÜÂà∞ Window Shopping"},
    "Conectamos productores chilenos con compradores internacionales":
        {"en": "Connecting Chilean producers with international buyers","zh": "ÈÄ£Êé•Êô∫Âà©ÁîüÁî¢ÂïÜËàáÂúãÈöõË≤∑ÂÆ∂"},
    "Comienza ahora": {"en": "Start now", "zh": "Á´ãÂç≥ÈñãÂßã"},
    "Explora nuestros servicios": {"en": "Explore our services", "zh": "Êé¢Á¥¢ÊàëÂÄëÁöÑÊúçÂãô"},
    "Compra y Venta": {"en": "Buy & Sell", "zh": "Ë≤∑Ë≥£"},
    "Servicios Log√≠sticos": {"en": "Logistic Services", "zh": "Áâ©ÊµÅÊúçÂãô"},
    "Sostenibilidad": {"en": "Sustainability", "zh": "Ê∞∏Á∫åÁôºÂ±ï"},
    "Ver Demandas": {"en": "View Demands", "zh": "Êü•ÁúãÈúÄÊ±Ç"},
    "Explorar Ofertas": {"en": "Browse Offers", "zh": "ÁÄèË¶ΩÂïÜÂìÅ"},
    "Explorar Servicios": {"en": "Explore Services", "zh": "Êé¢Á¥¢ÊúçÂãô"},
    "Panel de Usuario": {"en": "User Dashboard", "zh": "Áî®Êà∂‰∏ªÈ†Å"},
    "Agregado al carrito": {"en": "Added to cart", "zh": "Â∑≤Âä†ÂÖ•Ë≥ºÁâ©Ëªä"},
    "Eliminado del carrito": {"en": "Removed from cart", "zh": "Â∑≤Âà™Èô§"},
    "Carrito vaciado": {"en": "Cart cleared", "zh": "Ë≥ºÁâ©ËªäÂ∑≤Ê∏ÖÁ©∫"},
    "Publicaci√≥n no encontrada": {"en": "Item not found", "zh": "Êâæ‰∏çÂà∞È†ÖÁõÆ"},
    "Publicaci√≥n ocultada": {"en": "Item hidden", "zh": "È†ÖÁõÆÂ∑≤Èö±Ëóè"},
    "Publicaciones restauradas": {"en": "Hidden items restored", "zh": "Â∑≤ÊÅ¢Âæ©Èö±ËóèÈ†ÖÁõÆ"},
    "P√°gina no encontrada": {"en": "Page not found", "zh": "Êâæ‰∏çÂà∞È†ÅÈù¢"},
    "Error interno del servidor": {"en": "Internal server error", "zh": "‰º∫ÊúçÂô®ÂÖßÈÉ®ÈåØË™§"},
    # Nuevas claves usadas en formularios y panel
    "Direcci√≥n": {"en": "Address", "zh": "Âú∞ÂùÄ"},
    "Tel√©fono": {"en": "Phone", "zh": "ÈõªË©±"},
    "Oferta": {"en": "Offer", "zh": "‰æõÊáâ"},
    "Demanda": {"en": "Demand", "zh": "ÈúÄÊ±Ç"},
    "Compra": {"en": "Buy", "zh": "Êé°Ë≥º"},
    "Venta": {"en": "Sell", "zh": "Èä∑ÂîÆ"},
    "Servicio": {"en": "Service", "zh": "ÊúçÂãô"},
    "Agregar √≠tem": {"en": "Add item", "zh": "Êñ∞Â¢ûÈ†ÖÁõÆ"},
    "Eliminar √≠tem": {"en": "Remove item", "zh": "Âà™Èô§È†ÖÁõÆ"},
    "Guardar": {"en": "Save", "zh": "ÂÑ≤Â≠ò"},
    "Cancelar": {"en": "Cancel", "zh": "ÂèñÊ∂à"},
    "Enviar mensaje": {"en": "Send message", "zh": "ÁôºÈÄÅË®äÊÅØ"},
    "Rol": {"en": "Role", "zh": "ËßíËâ≤"},
    "Tipo": {"en": "Type", "zh": "È°ûÂûã"},
    "Pa√≠s": {"en": "Country", "zh": "ÂúãÂÆ∂"},
    "Empresa": {"en": "Company", "zh": "ÂÖ¨Âè∏"},
    "Precio": {"en": "Price", "zh": "ÂÉπÊ†º"},
    "Ver Detalle": {"en": "View Detail", "zh": "Êü•ÁúãË©≥ÊÉÖ"},
    "Empresas Registradas": {"en": "Registered Companies", "zh": "Â∑≤Ë®ªÂÜäÂÖ¨Âè∏"},
    "No hay empresas registradas para mostrar.": {"en": "No companies to show.", "zh": "Ê≤íÊúâÂèØÈ°ØÁ§∫ÁöÑÂÖ¨Âè∏„ÄÇ"},
    "Productos o Servicios": {"en": "Products or Services", "zh": "Áî¢ÂìÅÊàñÊúçÂãô"},
    "Escribe un mensaje...": {"en": "Write a message...", "zh": "ÂØ´‰∏ÄÊ¢ùË®äÊÅØ..."},
    "Volver": {"en": "Back", "zh": "ËøîÂõû"},
    "Perfil de Usuario": {"en": "User Profile", "zh": "Áî®Êà∂Ê™îÊ°à"},
       "Documento RUT": {"en": "RUT document", "zh": "Á®ÖËôüÊñá‰ª∂"},
    "Opciones": {"en": "Options", "zh": "ÈÅ∏È†Ö"},
    "Agregar item": {"en": "Add item", "zh": "Êñ∞Â¢ûÈ†ÖÁõÆ"},
    "Eliminar item": {"en": "Delete item", "zh": "Âà™Èô§È†ÖÁõÆ"},
    "Ocultar de vista": {"en": "Hide from view", "zh": "Èö±Ëóè"},
    "Restaurar ocultos": {"en": "Restore hidden", "zh": "ÊÅ¢Âæ©Èö±Ëóè"},
    "Ofertas Disponibles": {"en": "Available Offers", "zh": "ÂèØÁî®Â†±ÂÉπ"},
    "Demandas y Solicitudes": {"en": "Demands and Requests", "zh": "ÈúÄÊ±ÇËàáË´ãÊ±Ç"},
    "No hay servicios disponibles.": {"en": "No services available.", "zh": "ÁõÆÂâçÊ≤íÊúâÂèØÁî®ÁöÑÊúçÂãô„ÄÇ"},
    "No hay publicaciones visibles para tu rol": {"en": "No publications visible for your role", "zh": "‰Ω†ÁöÑËßíËâ≤ÁÑ°ÂèØË¶ãÁöÑÈ†ÖÁõÆ"},
    "Publicaciones": {"en": "Publications", "zh": "ÂàäÁôª"},
    "Buscar": {"en": "Search", "zh": "ÊêúÂ∞ã"},
    "Pa√≠s (C√≥digo ISO de 2 letras)": {"en": "Country (ISO 2-letter code)", "zh": "ÂúãÂÆ∂ÔºàISO 2 Â≠óÊØç‰ª£Á¢ºÔºâ"}
}
# =========================================================
# üåê FUNCIONES DE IDIOMA
# =========================================================
@app.context_processor
def inject_translations():
    """Permite usar traducciones desde cualquier template."""
    def translate(text):
        lang = session.get("lang", "es")
        if text in TRANSLATIONS and lang in TRANSLATIONS[text]:
            return TRANSLATIONS[text][lang]
        return text
    return dict(t=translate)

@app.route("/set_lang", methods=["POST", "GET"])
def set_lang():
    """Establece el idioma actual de sesi√≥n."""
    lang = request.args.get("lang") or request.form.get("lang") or "es"
    session["lang"] = lang
    flash(f"üåê Idioma cambiado a: {lang}", "info")
    return redirect(request.referrer or url_for("home"))
# =========================================================
# üß≠ RUTAS PRINCIPALES
# =========================================================

@app.route("/")
def home():
    lang = session.get("lang", "es")
    titulo = t("Inicio", "Home", "‰∏ªÈ†Å")
    return render_template("home.html", titulo=titulo)


# =========================================================
# üîê LOGIN / LOGOUT / REGISTRO
# =========================================================

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form.get("email")
        password = request.form.get("password")
        user = get_user(email)

        if user and user["password"] == password:
            session["user"] = dict(user)
            flash(t("Inicio de sesi√≥n exitoso", "Login successful", "ÁôªÂÖ•ÊàêÂäü"), "success")
            return redirect(url_for("dashboard"))
        else:
            flash(t("Correo o contrase√±a incorrectos", "Invalid credentials", "ÈõªÂ≠êÈÉµ‰ª∂ÊàñÂØÜÁ¢ºÈåØË™§"), "error")

    return render_template("login.html", titulo=t("Iniciar sesi√≥n", "Login", "ÁôªÂÖ•"))


@app.route("/logout")
def logout():
    session.pop("user", None)
    flash(t("Has cerrado sesi√≥n", "You have logged out", "ÊÇ®Â∑≤ÁôªÂá∫"), "info")
    return redirect(url_for("home"))


@app.route("/register_router")
def register_router():
    return render_template("registro_tipo.html", titulo=t("Tipo de cuenta", "Account type", "Â∏≥Êà∂È°ûÂûã"))


@app.route("/register/<tipo>", methods=["GET", "POST"])
def register(tipo):
    if request.method == "POST":
        data = {k: request.form.get(k) for k in
                ["email", "password", "empresa", "rol", "pais", "direccion", "telefono"]}
        file = request.files.get("rut_doc")
        rut_path = save_uploaded_file(file)

        add_user(
            email=data["email"],
            password=data["password"],
            empresa=data["empresa"],
            rol=data["rol"],
            tipo=tipo,
            pais=data["pais"],
            rut_doc=rut_path,
            direccion=data["direccion"],
            telefono=data["telefono"],
        )
        flash(t("Registro exitoso", "Registration successful", "Ë®ªÂÜäÊàêÂäü"), "success")
        return redirect(url_for("login"))

    roles = ROLES_POR_TIPO.get(tipo, [])
    return render_template("registro.html", tipo=tipo, roles=roles, titulo=t("Registro", "Register", "Ë®ªÂÜä"))


# =========================================================
# üßë‚Äçüíº DASHBOARD
# =========================================================

@app.route("/dashboard")
def dashboard():
    user = session.get("user")
    if not user:
        return redirect(url_for("login"))

    rol = user.get("rol", "")
    publicaciones = publicaciones_visibles(user)

    return render_template(
        "dashboard.html",
        user=user,
        publicaciones=publicaciones,
        titulo=t("Panel de Usuario", "User Dashboard", "Áî®Êà∂‰∏ªÈ†Å")
    )


# =========================================================
# üß∫ CARRITO
# =========================================================

@app.route("/carrito")
def carrito():
    cart = get_cart()
    return render_template("carrito.html", cart=cart, titulo=t("Carrito", "Cart", "Ë≥ºÁâ©Ëªä"))


@app.route("/carrito/agregar/<pub_id>", methods=["POST", "GET"])
def carrito_agregar(pub_id):
    pub = next((p for p in PUBLICACIONES if p["id"] == pub_id), None)
    if not pub:
        flash(t("Publicaci√≥n no encontrada", "Item not found", "Êâæ‰∏çÂà∞È†ÖÁõÆ"), "error")
        return redirect(request.referrer or url_for("dashboard"))
    add_to_cart(pub)
    flash(t("Agregado al carrito", "Added to cart", "Â∑≤Âä†ÂÖ•Ë≥ºÁâ©Ëªä"), "success")
    return redirect(request.referrer or url_for("carrito"))


@app.route("/carrito/eliminar/<int:index>", methods=["POST"])
def carrito_eliminar(index):
    if remove_from_cart(index):
        flash(t("Eliminado del carrito", "Removed from cart", "Â∑≤Âà™Èô§"), "info")
    return redirect(url_for("carrito"))


@app.route("/carrito/vaciar", methods=["POST"])
def carrito_vaciar():
    clear_cart()
    flash(t("Carrito vaciado", "Cart cleared", "Ë≥ºÁâ©ËªäÂ∑≤Ê∏ÖÁ©∫"), "info")
    return redirect(url_for("carrito"))


# =========================================================
# üß± PUBLICACIONES / OCULTAR
# =========================================================

@app.route("/ocultar/<pub_id>", methods=["POST"])
def ocultar_publicacion(pub_id):
    hide_item(pub_id)
    flash(t("Publicaci√≥n ocultada", "Item hidden", "È†ÖÁõÆÂ∑≤Èö±Ëóè"), "info")
    return redirect(url_for("dashboard"))


@app.route("/restablecer_ocultos", methods=["POST"])
def restablecer_ocultos():
    unhide_all()
    flash(t("Publicaciones restauradas", "Hidden items restored", "Â∑≤ÊÅ¢Âæ©Èö±ËóèÈ†ÖÁõÆ"), "success")
    return redirect(url_for("dashboard"))


# =========================================================
# üè¢ CLIENTES / DETALLE
# =========================================================

@app.route("/clientes")
def clientes():
    data = []
    for username, info in USERS.items():
        data.append(_armar_cliente_desde_users(username, info))
    return render_template("clientes.html", clientes=data, titulo=t("Empresas", "Companies", "ÂÖ¨Âè∏"))


@app.route("/clientes/<username>")
def cliente_detalle(username):
    if username not in USERS:
        abort(404)
    cliente = _armar_cliente_desde_users(username, USERS[username])
    return render_template("cliente_detalle.html", c=cliente, titulo=cliente["empresa"])


# =========================================================
# üõí COMPRAS / VENTAS / SERVICIOS
# =========================================================

@app.route("/compras")
def compras():
    q = request.args.get("q", "").lower()
    visibles = [p for p in PUBLICACIONES if p["tipo"] == "oferta"]
    if q:
        visibles = [p for p in visibles if q in p["empresa"].lower() or q in p["producto"].lower()]
    return render_template("compras.html", data=visibles, titulo=t("Ofertas Disponibles", "Available Offers", "ÂèØÁî®Â†±ÂÉπ"))


@app.route("/ventas")
def ventas():
    visibles = [p for p in PUBLICACIONES if p["tipo"] == "demanda"]
    return render_template("ventas.html", publicaciones=visibles, titulo=t("Demandas y Solicitudes", "Demands and Requests", "ÈúÄÊ±ÇËàáË´ãÊ±Ç"))


@app.route("/servicios")
def servicios():
    visibles = [p for p in PUBLICACIONES if p["tipo"] == "servicio"]
    return render_template("servicios.html", publicaciones=visibles, titulo=t("Servicios", "Services", "ÊúçÂãô"))


# =========================================================
# ‚öôÔ∏è ERRORES
# =========================================================

@app.errorhandler(404)
def not_found(e):
    return render_template("error.html", code=404, message=t("P√°gina no encontrada", "Page not found", "Êâæ‰∏çÂà∞È†ÅÈù¢")), 404


@app.errorhandler(500)
def internal_error(e):
    return render_template("error.html", code=500, message=t("Error interno del servidor", "Internal server error", "‰º∫ÊúçÂô®ÂÖßÈÉ®ÈåØË™§")), 500


# =========================================================
# üöÄ RUN LOCAL (solo debug)
# =========================================================

if __name__ == "__main__":
    app.run(debug=True, port=5000)
# =========================================================
# üß© GESTI√ìN DE PUBLICACIONES (OFERTA / DEMANDA / SERVICIO)
# =========================================================

import uuid  # Para generar IDs √∫nicos de publicaciones

# --- Subtipos seg√∫n flujo y tipo ---
SUBTIPOS_POR_TIPO = {
    "oferta": ["Compra", "Venta", "Servicio"],
    "demanda": ["Compra", "Venta", "Servicio"]
}


@app.route("/publicar", methods=["GET", "POST"])
def publicar():
    """Permite crear una nueva publicaci√≥n (oferta o demanda) seg√∫n perfil."""
    user = session.get("user")
    if not user:
        flash(t("Debes iniciar sesi√≥n para publicar.", "You must log in to post.", "ÊÇ®ÂøÖÈ†àÁôªÂÖ•‰ª•ÁôºÂ∏É"), "error")
        return redirect(url_for("login"))

    rol = user.get("rol", "")
    tipo_cuenta = user.get("tipo", "")

    if request.method == "POST":
        tipo_pub = request.form.get("tipo_pub")          # oferta / demanda
        subtipo = request.form.get("subtipo")            # compra / venta / servicio
        producto = request.form.get("producto", "").strip()
        descripcion = request.form.get("descripcion", "").strip()
        precio = request.form.get("precio", "").strip()

        # Validaci√≥n de campos
        if not all([tipo_pub, subtipo, producto, descripcion]):
            flash(t("Todos los campos son obligatorios.", "All fields are required.", "ÊâÄÊúâÊ¨Ñ‰ΩçÈÉΩÊòØÂøÖÂ°´ÁöÑ"), "error")
            return redirect(url_for("publicar"))

        # Asegurar precio legible
        if not precio:
            precio = "Consultar"

        # Generar ID √∫nico seguro
        pub_id = f"pub_{uuid.uuid4().hex[:8]}"

        nueva_pub = {
            "id": pub_id,
            "usuario": user.get("email"),
            "tipo": tipo_pub,                # oferta o demanda
            "rol": rol,
            "empresa": user.get("empresa"),
            "producto": producto,
            "precio": precio,
            "descripcion": f"{subtipo.upper()} ‚Äî {descripcion}",
            "fecha": datetime.now().strftime("%Y-%m-%d %H:%M"),
        }

        PUBLICACIONES.append(nueva_pub)
        flash(t("Publicaci√≥n agregada correctamente.", "Post added successfully.", "ÊàêÂäüÊñ∞Â¢ûÁôºÂ∏É"), "success")
        return redirect(url_for("dashboard"))

    return render_template(
        "publicar.html",
        subtipo_opciones=SUBTIPOS_POR_TIPO,
        titulo=t("Nueva Publicaci√≥n", "New Post", "Êñ∞Â¢ûÁôºÂ∏É"),
        user=user
    )


# =========================================================
# üßπ ELIMINAR PUBLICACI√ìN (Solo propias)
# =========================================================

@app.route("/publicacion/eliminar/<pub_id>", methods=["POST"])
def eliminar_publicacion(pub_id):
    """Permite eliminar publicaciones creadas por el usuario logueado."""
    user = session.get("user")
    if not user:
        flash(t("Debes iniciar sesi√≥n.", "You must log in.", "ÊÇ®ÂøÖÈ†àÁôªÂÖ•"), "error")
        return redirect(url_for("login"))

    global PUBLICACIONES
    antes = len(PUBLICACIONES)

    # Filtra publicaciones que no coinciden con el ID o no pertenecen al usuario
    PUBLICACIONES = [
        p for p in PUBLICACIONES
        if not (p["id"] == pub_id and p["usuario"] == user["email"])
    ]

    despues = len(PUBLICACIONES)

    if antes > despues:
        flash(t("Publicaci√≥n eliminada correctamente.", "Post deleted successfully.", "Â∑≤Âà™Èô§ÁôºÂ∏É"), "success")
    else:
        flash(t("No se encontr√≥ la publicaci√≥n o no tienes permiso.", "Not found or no permission.", "Êú™ÊâæÂà∞ÊàñÁÑ°Ê¨äÈôê"), "error")

    return redirect(url_for("dashboard"))
# =========================================================
# üß≠ DASHBOARD EXTENDIDO CON FILTROS Y VISTAS POR PERFIL
# =========================================================

@app.route("/dashboard", methods=["GET", "POST"])
def dashboard():
    """Muestra el panel de usuario con publicaciones filtradas y acciones din√°micas."""
    user = session.get("user")
    if not user:
        flash(t("Debes iniciar sesi√≥n.", "You must log in.", "ÊÇ®ÂøÖÈ†àÁôªÂÖ•"), "error")
        return redirect(url_for("login"))

    rol = user.get("rol", "")
    tipo = user.get("tipo", "")
    filtro = request.args.get("filtro", "oferta")  # valor por defecto

    # Determina el conjunto de publicaciones visibles seg√∫n permisos
    publicaciones = [
        p for p in PUBLICACIONES
        if publica_es_visible_para_rol(p, rol) and p["tipo"] == filtro
    ]

    # Ordenar publicaciones m√°s recientes primero (por fecha si existe)
    publicaciones.sort(key=lambda p: p.get("fecha", ""), reverse=True)

    # Extrae solo las publicaciones del propio usuario
    propias = [p for p in PUBLICACIONES if p["usuario"] == user["email"]]
    propias.sort(key=lambda p: p.get("fecha", ""), reverse=True)

    return render_template(
        "dashboard.html",
        user=user,
        publicaciones=publicaciones,
        propias=propias,
        filtro=filtro,
        titulo=t("Panel de Usuario", "User Dashboard", "Áî®Êà∂‰∏ªÈ†Å"),
    )


# =========================================================
# üîÑ CAMBIO DE FILTRO EN DASHBOARD (AJAX SIMPLIFICADO)
# =========================================================

@app.route("/dashboard/filtro/<tipo>")
def cambiar_filtro_dashboard(tipo):
    """Permite cambiar el filtro de vista del panel (oferta/demanda/servicio)."""
    if tipo not in ["oferta", "demanda", "servicio"]:
        flash(t("Filtro inv√°lido", "Invalid filter", "ÁÑ°ÊïàÁöÑÁØ©ÈÅ∏Ê¢ù‰ª∂"), "error")
        return redirect(url_for("dashboard"))
    return redirect(url_for("dashboard", filtro=tipo))


# =========================================================
# üìä PANEL DE CONTROL: RESUMEN POR ROL Y ACCIONES R√ÅPIDAS
# =========================================================

@app.route("/panel_info")
def panel_info():
    """Devuelve un resumen visual del rol y tipo actual (demo para templates)."""
    user = session.get("user")
    if not user:
        return redirect(url_for("login"))

    rol = user.get("rol", "")
    tipo = user.get("tipo", "")

    info = {
        "rol": rol,
        "tipo": tipo,
        "total_publicaciones": len([p for p in PUBLICACIONES if p["usuario"] == user["email"]]),
        "puede_ofertar": tipo in ["compraventa", "mixto"],
        "puede_demandar": tipo in ["compras", "compraventa", "mixto"],
        "puede_servicios": tipo in ["servicios", "mixto", "compraventa"],
    }

    return info


# =========================================================
# ‚ö° ACTUALIZACI√ìN VISUAL DE LAS VISTAS (RUTAS DE AYUDA)
# =========================================================

@app.route("/refresh_dashboard")
def refresh_dashboard():
    """Recarga el panel manteniendo el filtro actual."""
    user = session.get("user")
    if not user:
        return redirect(url_for("login"))
    filtro_actual = request.args.get("filtro", "oferta")
    return redirect(url_for("dashboard", filtro=filtro_actual))


@app.route("/mis_publicaciones")
def mis_publicaciones():
    """Muestra solo las publicaciones propias del usuario."""
    user = session.get("user")
    if not user:
        return redirect(url_for("login"))

    propias = [p for p in PUBLICACIONES if p["usuario"] == user["email"]]
    propias.sort(key=lambda p: p.get("fecha", ""), reverse=True)

    return render_template(
        "mis_publicaciones.html",
        user=user,
        publicaciones=propias,
        titulo=t("Mis Publicaciones", "My Posts", "ÊàëÁöÑÁôºÂ∏É")
    )


# =========================================================
# üß≠ L√ìGICA PARA COMBINAR VISTAS (COMPRAS / VENTAS / SERVICIOS)
# =========================================================

@app.route("/empresas_filtradas/<categoria>")
def empresas_filtradas(categoria):
    """
    Muestra empresas seg√∫n la categor√≠a seleccionada:
    compras -> empresas que venden
    ventas  -> empresas que compran
    servicios -> empresas que ofrecen servicios
    """
    if categoria not in ["compras", "ventas", "servicios"]:
        abort(404)

    data = []
    for username, info in USERS.items():
        if categoria == "compras" and info["tipo"] in ["compraventa", "mixto"]:
            data.append(_armar_cliente_desde_users(username, info))
        elif categoria == "ventas" and info["tipo"] in ["compras", "compraventa"]:
            data.append(_armar_cliente_desde_users(username, info))
        elif categoria == "servicios" and info["tipo"] == "servicios":
            data.append(_armar_cliente_desde_users(username, info))

    # ‚úÖ Mejora visual: ordenar empresas alfab√©ticamente
    data.sort(key=lambda x: x["empresa"])

    return render_template(
        "clientes.html",
        clientes=data,
        titulo=t("Empresas", "Companies", "ÂÖ¨Âè∏"),
        categoria=categoria
    )
# =========================================================
# üí¨ MENSAJER√çA ENTRE USUARIOS (desde perfil empresa)
# =========================================================

MENSAJES: list[dict[str, str]] = []  # almacenamiento temporal en memoria

@app.route("/mensaje/enviar/<username>", methods=["POST"])
def enviar_mensaje(username):
    """Permite enviar un mensaje a otra empresa registrada."""
    user = session.get("user")
    if not user:
        flash(t("Debes iniciar sesi√≥n para enviar mensajes.",
                "You must log in to send messages.",
                "ÊÇ®ÂøÖÈ†àÁôªÂÖ•ÊâçËÉΩÁôºÈÄÅË®äÊÅØ"), "error")
        return redirect(url_for("login"))

    if username not in USERS:
        flash(t("Usuario destino no encontrado.",
                "Target user not found.",
                "Êâæ‰∏çÂà∞ÁõÆÊ®ôÁî®Êà∂"), "error")
        return redirect(url_for("clientes"))

    contenido = request.form.get("mensaje", "").strip()
    if not contenido:
        flash(t("El mensaje no puede estar vac√≠o.",
                "Message cannot be empty.",
                "Ë®äÊÅØ‰∏çËÉΩÁÇ∫Á©∫"), "error")
        return redirect(url_for("cliente_detalle", username=username))

    mensaje = {
        "de": user.get("empresa"),
        "para": USERS[username]["empresa"],
        "fecha": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "contenido": contenido,
    }
    MENSAJES.append(mensaje)

    flash(t("Mensaje enviado correctamente.",
            "Message sent successfully.",
            "Ë®äÊÅØÂ∑≤ÊàêÂäüÁôºÈÄÅ"), "success")
    return redirect(url_for("cliente_detalle", username=username))


@app.route("/mensajes")
def ver_mensajes():
    """Muestra los mensajes recibidos (solo modo demo)."""
    user = session.get("user")
    if not user:
        return redirect(url_for("login"))

    empresa_actual = user.get("empresa")
    recibidos = [m for m in MENSAJES if m["para"] == empresa_actual]

    return render_template(
        "mensajes.html",
        mensajes=recibidos,
        titulo=t("Mensajes recibidos", "Received messages", "Êî∂Âà∞ÁöÑË®äÊÅØ")
    )


# =========================================================
# üåç IDIOMA / TRADUCCIONES FINALES
# =========================================================

@app.route("/set_lang", methods=["POST", "GET"])
def set_lang():
    """Cambia el idioma de la sesi√≥n (desde el men√∫ o bandera)."""
    lang = request.form.get("lang") or request.args.get("lang")
    if lang in ["es", "en", "zh"]:
        session["lang"] = lang
        flash(t("Idioma cambiado correctamente.",
                "Language changed successfully.",
                "Ë™ûË®ÄÂ∑≤ÊàêÂäüÊõ¥Êîπ"), "info")
    else:
        flash(t("Idioma no soportado.",
                "Unsupported language.",
                "‰∏çÊîØÊè¥ÁöÑË™ûË®Ä"), "error")
    return redirect(request.referrer or url_for("home"))


@app.context_processor
def inject_translations():
    """Inyector global de funci√≥n t() para usar en todos los templates."""
    return dict(t=t)


# =========================================================
# üß≠ RUTAS ADICIONALES / UTILIDADES
# =========================================================

@app.route("/perfil")
def perfil():
    """Muestra el perfil actual del usuario logueado."""
    user = session.get("user")
    if not user:
        flash(t("Debes iniciar sesi√≥n para ver tu perfil.",
                "You must log in to view your profile.",
                "ÊÇ®ÂøÖÈ†àÁôªÂÖ•ÊâçËÉΩÊü•ÁúãÂÄã‰∫∫Ë≥áÊñô"), "error")
        return redirect(url_for("login"))
    return render_template("perfil.html", user=user,
                           titulo=t("Perfil de Usuario",
                                    "User Profile",
                                    "Áî®Êà∂Ê™îÊ°à"))


@app.route("/ayuda")
def ayuda():
    """Vista informativa o p√°gina de ayuda (demo)."""
    return render_template("ayuda.html",
                           titulo=t("Ayuda", "Help", "Âπ´Âä©"))


# =========================================================
# ‚úÖ CONFIRMACI√ìN FINAL DE SISTEMA
# =========================================================

@app.route("/status")
def status():
    """Ruta interna para verificar el estado general del sistema."""
    estado = {
        "usuarios": len(seed_demo_users.__code__.co_consts),
        "publicaciones": len(PUBLICACIONES),
        "mensajes": len(MENSAJES),
        "idioma": session.get("lang", "es"),
        "estado": "OK ‚úÖ"
    }
    return estado
